#!/bin/bash
set -e

echo "üîç DIAGN√ìSTICO COMPLETO DA IA"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo ""

# 1. Verificar GEMINI_API_KEY
echo "1Ô∏è‚É£ Verificando GEMINI_API_KEY:"
if docker compose exec backend env | grep -q "GEMINI_API_KEY=sk"; then
    echo "   ‚úÖ GEMINI_API_KEY est√° configurada"
    docker compose exec backend env | grep "GEMINI_API_KEY" | sed 's/\(GEMINI_API_KEY=sk[^"]*\).*/\1.../'
else
    echo "   ‚ùå GEMINI_API_KEY N√ÉO est√° configurada!"
    echo ""
    echo "   üìù Configure com:"
    echo "   echo 'GEMINI_API_KEY=SUA_CHAVE_AQUI' >> .env"
fi

echo ""

# 2. Testar gera√ß√£o de embedding
echo "2Ô∏è‚É£ Testando gera√ß√£o de embeddings:"
docker compose exec backend python3 << 'EMBEOF'
try:
    from app.ai.rag.embeddings import generate_embedding
    emb = generate_embedding("teste fisioterapia")
    print(f"   ‚úÖ Embedding gerado: {len(emb)} dimens√µes")
except Exception as e:
    print(f"   ‚ùå Erro: {e}")
EMBEOF

echo ""

# 3. Testar busca no Qdrant
echo "3Ô∏è‚É£ Testando busca no Qdrant:"
docker compose exec backend python3 << 'QDREOF'
try:
    from app.ai.rag.embeddings import generate_embedding
    from app.ai.rag.vectorstore import search_similar_cases
    
    query_vector = generate_embedding("fisioterapia APAE")
    results = search_similar_cases(query_vector, limit=3)
    print(f"   ‚úÖ Encontrados: {len(results)} casos similares")
    for i, r in enumerate(results, 1):
        print(f"      {i}. Score: {r.score:.3f}")
except Exception as e:
    print(f"   ‚ùå Erro: {e}")
QDREOF

echo ""

# 4. Testar Gemini diretamente
echo "4Ô∏è‚É£ Testando API Gemini:"
docker compose exec backend python3 << 'GEMEOF'
import google.generativeai as genai
from app.config import settings
import os

try:
    key = os.getenv('GEMINI_API_KEY')
    if not key:
        print("   ‚ùå GEMINI_API_KEY n√£o encontrada!")
    else:
        print(f"   üîë Key: {key[:10]}...")
        genai.configure(api_key=key)
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content("Diga ol√° em uma palavra")
        print(f"   ‚úÖ Gemini respondeu: {response.text[:50]}")
except Exception as e:
    print(f"   ‚ùå Erro ao conectar Gemini: {e}")
GEMEOF

echo ""

# 5. Ver logs de erro
echo "5Ô∏è‚É£ √öltimos erros do backend:"
docker compose logs backend --tail=20 | grep -i "error\|exception\|failed\|timeout" | tail -5 || echo "   ‚úÖ Nenhum erro recente"

echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

