#!/usr/bin/env python3
"""
Importa casos hist√≥ricos de exemplo
"""
import sys
import os

sys.path.insert(0, '/app')
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

print("üìö Importando casos hist√≥ricos...")

try:
    from app.database.session import SessionLocal
    from app.models.historical_case import HistoricalCase
    from app.ai.rag.embeddings import generate_embedding
    from app.ai.rag.vectorstore import get_qdrant_client
    from qdrant_client.models import PointStruct
    
    print("‚úÖ Depend√™ncias importadas")
    
    db = SessionLocal()
    qdrant = get_qdrant_client()
    
    # Verificar se j√° existem casos
    existing = db.query(HistoricalCase).count()
    if existing > 0:
        print(f"‚ö†Ô∏è  J√° existem {existing} casos no banco. Pulando importa√ß√£o.")
        print("   Para reimportar, delete os casos existentes primeiro.")
        db.close()
        sys.exit(0)
    
    # Casos de exemplo
    casos = [
        {
            "titulo": "Implanta√ß√£o de Centro de Reabilita√ß√£o F√≠sica para PcD",
            "instituicao": "Hospital Regional de Sa√∫de - SP",
            "ano": 2024,
            "area": "prestacao_servicos",
            "area_prioritaria": "Reabilita√ß√£o F√≠sica",
            "aprovado": True,
            "pontuacao": 85,
            "orcamento": 500000,
            "texto": """Projeto aprovado com excel√™ncia para implanta√ß√£o de centro especializado em reabilita√ß√£o f√≠sica. 
            PONTOS FORTES: Objetivos claros e mensur√°veis alinhados √†s necessidades da comunidade. Metodologia bem definida 
            com cronograma realista de 24 meses. Equipe t√©cnica altamente qualificada com fisioterapeutas, terapeutas 
            ocupacionais e m√©dicos especializados. Or√ßamento detalhado conforme tabela SINAPI e pre√ßos de mercado. 
            Parcerias estrat√©gicas firmadas com universidades para capacita√ß√£o continuada. Indicadores de avalia√ß√£o 
            mensur√°veis (n√∫mero de atendimentos, taxa de melhora funcional, satisfa√ß√£o dos usu√°rios). Plano de 
            sustentabilidade consistente com contrapartida institucional e busca de financiamentos complementares."""
        },
        {
            "titulo": "Programa de Capacita√ß√£o em Transtornos do Espectro Autista",
            "instituicao": "Instituto Nacional de Forma√ß√£o em Sa√∫de - RJ",
            "ano": 2024,
            "area": "formacao_treinamento",
            "area_prioritaria": "Transtornos do Espectro Autista",
            "aprovado": True,
            "pontuacao": 78,
            "orcamento": 200000,
            "texto": """Projeto de capacita√ß√£o profissional aprovado. Curso estruturado em 5 m√≥dulos progressivos de 
            120 horas totais. Material did√°tico de alta qualidade desenvolvido por especialistas. Corpo docente com 
            expertise comprovada na √°rea de TEA e m√©todos ABA. Metodologia te√≥rico-pr√°tica com estudos de caso reais. 
            Avalia√ß√£o continuada dos participantes. Certifica√ß√£o reconhecida pelo MEC. Meta de capacitar 200 profissionais 
            da rede p√∫blica de sa√∫de. Infraestrutura adequada com laborat√≥rios e recursos tecnol√≥gicos."""
        },
        {
            "titulo": "Pesquisa sobre Tecnologias Assistivas Inovadoras",
            "instituicao": "Universidade Federal de Pesquisa",
            "ano": 2024,
            "area": "realizacao_pesquisas",
            "area_prioritaria": "Tecnologias Assistivas",
            "aprovado": True,
            "pontuacao": 82,
            "orcamento": 350000,
            "texto": """Projeto de pesquisa cient√≠fica aprovado. Metodologia robusta com protocolo de pesquisa bem 
            fundamentado. Equipe multidisciplinar com pesquisadores doutores e mestres. Revis√£o bibliogr√°fica extensa. 
            Cronograma de 36 meses bem distribu√≠do entre fases de desenvolvimento, testes e valida√ß√£o. Comit√™ de √©tica 
            aprovado. Potencial de impacto social elevado com desenvolvimento de dispositivos de baixo custo. 
            Plano de divulga√ß√£o cient√≠fica em peri√≥dicos indexados."""
        },
        {
            "titulo": "Projeto Sem Detalhamento Or√ßament√°rio Adequado",
            "instituicao": "Entidade Beneficente XYZ",
            "ano": 2023,
            "area": "prestacao_servicos",
            "area_prioritaria": "",
            "aprovado": False,
            "pontuacao": 35,
            "orcamento": 0,
            "texto": """Projeto REPROVADO por m√∫ltiplas defici√™ncias graves. MOTIVOS DE REPROVA√á√ÉO: 
            1) Or√ßamento apresentado sem detalhamento adequado, valores gen√©ricos sem base em tabelas oficiais como SINAPI.
            2) Objetivos vagos e n√£o mensur√°veis, impossibilitando avalia√ß√£o de resultados.
            3) Metodologia superficial sem descri√ß√£o clara das etapas de execu√ß√£o.
            4) Aus√™ncia de documenta√ß√£o comprobat√≥ria da qualifica√ß√£o da equipe t√©cnica.
            5) Falta de indicadores quantitativos e qualitativos de avalia√ß√£o.
            6) Cronograma irrealista com prazos incompat√≠veis com as atividades propostas.
            7) Aus√™ncia de plano de sustentabilidade p√≥s-financiamento.
            8) Parcerias mencionadas sem documentos formais de compromisso."""
        },
        {
            "titulo": "Atendimento a Pessoas com Defici√™ncia Visual - Projeto Incompleto",
            "instituicao": "Associa√ß√£o de Apoio",
            "ano": 2023,
            "area": "prestacao_servicos",
            "area_prioritaria": "Defici√™ncia Visual",
            "aprovado": False,
            "pontuacao": 42,
            "orcamento": 150000,
            "texto": """Projeto REPROVADO por incompletude e inconsist√™ncias. Apesar de or√ßamento apresentado, 
            faltaram justificativas para os valores. Equipe t√©cnica mencionada sem comprova√ß√£o de v√≠nculo institucional. 
            Metodologia pouco detalhada. Aus√™ncia de diagn√≥stico situacional da regi√£o de atua√ß√£o. P√∫blico-alvo 
            mal caracterizado. Metas sem fundamenta√ß√£o em dados epidemiol√≥gicos."""
        }
    ]
    
    print(f"\nüì• Importando {len(casos)} casos de exemplo...\n")
    
    count = 0
    for i, caso_data in enumerate(casos, 1):
        print(f"[{i}/{len(casos)}] Processando: {caso_data['titulo'][:50]}...")
        
        # Criar no PostgreSQL
        case = HistoricalCase(
            project_title=caso_data['titulo'],
            institution_name=caso_data['instituicao'],
            year=caso_data['ano'],
            field=caso_data['area'],
            priority_area=caso_data.get('area_prioritaria', ''),
            is_approved=caso_data['aprovado'],
            score=caso_data['pontuacao'],
            budget=caso_data['orcamento'],
            full_text=caso_data['texto'],
            summary=caso_data['texto'][:200] + "...",
            key_points=[],
            rejection_reasons=[]
        )
        
        db.add(case)
        db.commit()
        db.refresh(case)
        
        print(f"   ‚úÖ Salvo no PostgreSQL (ID: {case.id})")
        
        # Gerar embedding
        print(f"   ü§ñ Gerando embedding...")
        embedding = generate_embedding(caso_data['texto'])
        
        # Adicionar ao Qdrant
        point = PointStruct(
            id=case.id,
            vector=embedding,
            payload={
                "title": case.project_title,
                "institution": case.institution_name,
                "field": case.field,
                "approved": case.is_approved,
                "score": case.score,
                "text": caso_data['texto'][:500]
            }
        )
        
        qdrant.upsert(
            collection_name="pronas_pcd_cases",
            points=[point]
        )
        
        status = "‚úÖ APROVADO" if caso_data['aprovado'] else "‚ùå REPROVADO"
        print(f"   {status} | Score: {caso_data['pontuacao']}/100\n")
        count += 1
    
    db.close()
    
    print("‚ïê" * 70)
    print(f"‚úÖ IMPORTA√á√ÉO CONCLU√çDA!")
    print("‚ïê" * 70)
    print(f"üìä Total de casos importados: {count}")
    print(f"   ‚Ä¢ Aprovados: {sum(1 for c in casos if c['aprovado'])}")
    print(f"   ‚Ä¢ Reprovados: {sum(1 for c in casos if not c['aprovado'])}")
    print(f"\nüîÆ Embeddings criados no Qdrant para busca sem√¢ntica")
    print(f"üóÑÔ∏è  Casos salvos no PostgreSQL")
    
except Exception as e:
    print(f"\n‚ùå Erro durante importa√ß√£o: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
